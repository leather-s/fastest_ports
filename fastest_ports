#!/usr/bin/env ruby

require 'highline'
require 'pry-nav'
require 'typhoeus'

version = '0.0.1'

cli = HighLine.new

class FastestPorts

  def initialize(ip, test_site_url, ping_limit, floor, ceiling)
    @ip = ip
    @test_site_url = test_site_url
    @port_floor = floor
    @port_ceiling = ceiling
    @ping_limit = ping_limit
    @ping_threshold = 5
    @results = {}
  end

  def purge_slow_ports

    (@port_floor..@port_ceiling).each do |port|
      @results[:"#{port}"] = 0
    end

    ip_frag = @ip.split(":")

    hydra = Typhoeus::Hydra.new(max_concurrency: 10)

    5.times do
      @results.each do |port, _value|
        request = Typhoeus::Request.new(@test_site,
          {
            timeout_ms:   @ping_limit >= 1000 ? @ping_limit : 1000,
            proxy:        "#{ip_frag[0]}:#{port}",
            proxyuserpwd: "#{ip_frag[2]}:#{ip_frag[3]}",
            headers:      { 'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' }
          }
        )

        request.on_complete do |response|
          next if response.timed_out?
          if @ping_limit >= (response.total_time * 1000).to_i
            @results[:"#{port}"] += 1
          end
        end

        hydra.queue(request)
      end
    end

    @starts = Time.now.to_i
    hydra.run
    @results.select { |port, ping_count| @ping_threshold <= ping_count }.keys.each { |t| puts ip_frag[2] ? "#{ip_frag[0]}:#{t}:#{ip_frag[2]}:#{ip_frag[3]}" : "#{ip_frag[0]}:#{t}" }
  end
end

# Begin

begin

  banner = File.read("./banner.txt")
  puts cli.color("version: #{version}", :cyan)
  puts cli.color(banner, :cyan)


  cli.choose do |menu|
    menu.prompt = "Please select an option or press 'Enter' to run proxy purge"
    menu.choice(:Run_proxy_purge) {
                               @test_site_url     = cli.ask "\n#{cli.color('Enter the full url for the site you wish to test.', :green)}"
                               @ip            = cli.ask "\n#{cli.color("Enter the ip address you wish to purge ports for.", :green)}"
                               @port_floor    = cli.ask "\n#{cli.color("Enter lowest port in test range.", :green)}"
                               @port_ceiling  = cli.ask "\n#{cli.color("Enter highest port in test range.", :green)}"
                               @ping_limit    = cli.ask "\n#{cli.color("Enter maximum allowed ping.", :green)}"
                              }

    menu.default = :Run_proxy_purge
  end

  cli.say("\n#{cli.color('Now finding fastest ports for ip', :red)} '#{cli.color(@ip, :blue)}'")
  FileUtils::mkdir_p "proxies"
  FastestPorts.new(@ip.to_s, @test_site_url.strip, @ping_limit.to_i, @port_floor.to_i, @port_ceiling.to_i).purge_slow_ports
end